# Sentiment Analysis Web App Documentation

## Overview

The Sentiment Analysis Web App is a user-friendly web application designed to analyze the sentiment of text reviews. It employs a smart machine learning model built using TensorFlow/Keras to predict the sentiment of provided text. Users can input a text review, and the model classifies it into one of six sentiments: 'Anger,' 'Fear,' 'Joy,' 'Love,' 'Sadness,' or 'Surprise.'

## Getting Started

### Prerequisites

Before you begin, make sure you have the following installed on your computer:

- Python 3.x
- TensorFlow
- Flask
- NLTK
- Profanity-Filter

You can install these necessary packages by running the following command with pip:

```bash
pip install tensorflow flask nltk profanity-filter
```

### Usage

1. **Get the Project:**

   Clone or download the project files to your local machine.

2. **Launch the Web App:**

   Open a terminal, navigate to the project directory, and run the Flask app:

   ```bash
   python app.py
   ```

3. **Access the Web App:**

   Open your web browser and visit [http://localhost:5000/](http://localhost:5000/). Now, you can enter a text review and get a sentiment prediction.

### Web App Customization

You can personalize the look and feel of the web app by modifying the HTML templates located in the `templates` folder.

## Model Training

**Model Overview:**

The Sentiment Analysis Web App employs a machine learning model created with TensorFlow/Keras. It's a multi-layer perceptron (MLP) neural network with the following key characteristics:

- **Architecture**: It consists of multiple layers, including hidden layers with 32 units and ReLU activation functions to capture complex patterns. The final layer has 6 units with a softmax activation, offering sentiment probabilities.

- **Loss Function**: The model uses Categorical Crossentropy, ideal for multi-class classification.

- **Optimizer**: It employs the Adam optimizer for efficient weight updates during training.

- **Early Stopping**: To prevent overfitting, an early stopping mechanism is implemented, restoring the best weights when validation loss plateaus.

**Text Preprocessing:**

Before feeding text reviews to the model, the input text goes through several preprocessing steps:

1. **Profanity Filtering**: Inappropriate language is filtered and replaced with 'X' to maintain sentiment analysis accuracy.

2. **Text Cleaning**: Non-alphabetic characters (like punctuation) are removed, leaving only alphabetic characters.

3. **Lowercasing**: Text is converted to lowercase for consistent processing.

4. **Tokenization**: The text is split into individual words (tokens).

5. **Stopword Removal**: Common English stopwords are removed, except for 'not' to preserve sentiment context.

6. **Stemming**: Words are stemmed with the Porter Stemmer to reduce inflected words to their root form, aiding generalization.

7. **Vectorization**: Preprocessed text is converted into numerical features using Count Vectorization, capturing word frequencies for a numerical text representation.

8. **Duplicates**: There were 2 duplicate data in the dataset, they were removed and stored in another variable.

This processed text is then sent to the model for sentiment analysis. These combined model design and text preprocessing steps ensure accurate sentiment classification of text reviews.

## Acknowledgments

The sentiment analysis model in this project is intended for demonstration purposes and may require additional customization and fine-tuning for production use.